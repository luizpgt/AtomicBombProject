#include <stdio.h>
#include <stdlib.h>
#define NOME 40

typedef struct _pessoa Pessoa;

struct _pessoa {
  int id;
  char nome[NOME + 1];
  Pessoa *next;
};

typedef struct {
  Pessoa *head;
  Pessoa *tail;
} Lista;

void showList(Lista *lista);
Pessoa *setPessoa();
void appendPessoa(Lista *lista, Pessoa *new);
// void pushPessoa(Lista *lista, Pessoa *new);
// void insertAfterPessoa(Lista *lista, Pessoa *new, int id);
// void deletePessoa(Lista *lista, int id);

int isEmpty(Lista *lista);

int main() {
  int acao, id;
  Lista *lista;
  lista = (Lista *)malloc(sizeof(Lista));
  lista->head = NULL;
  lista->tail = NULL;

  while (1) {

    printf("action:\n");
    scanf("%d", &acao);

    if (acao == 1) {
      showList(lista);
    } else if (acao == 2) {
      appendPessoa(lista, setPessoa());
    } else if (acao == 3) {
      //     pushPessoa(lista, setPessoa());
    } else if (acao == 4) {
      printf("inserir pessoa apÃ³s id\n");
      scanf("%d", &id);
      //     insertAfterPessoa(lista, setPessoa(), id);
    } else if (acao == 5) {
      printf("deletar id:\n");
      scanf("%d", &id);
      //     deletePessoa(lista, id);
    }
  }
  return 0;
}

void showList(Lista *lista) {
  if (isEmpty(lista)) {
    printf("lista vazia!\n");
    return;
  }

  Pessoa *aux;
  for (aux = lista->head; aux != NULL; aux = aux->next)
    printf("id: %d\nnome: %s\n", aux->id, aux->nome);
}

int isEmpty(Lista *lista) {
  int is = 0;
  if (lista->head == NULL)
    is++;
  return is;
}

Pessoa *setPessoa() {
  int id;
  char nome[NOME + 1];
  Pessoa *new;
  new = (Pessoa *)malloc(sizeof(Pessoa));
  printf("new id:\n");
  scanf("%id", &id);
  new->id = id;
  printf("new nome:\n");
  scanf("%s", nome);
  snprintf(new->nome, NOME + 1, "%s", nome);

  new->next = NULL;
  return new;
}

void appendPessoa(Lista *lista, Pessoa *new) {
  Pessoa *aux = lista->head;
  if (isEmpty(lista)) {
    lista->head = new;
    return;
  }

  while (aux->next != NULL) {
    printf("aux name : %s\n", aux->nome);
    aux = aux->next;
  }
  printf("aux->nome: %s\n", aux->nome);

  aux->next = new;
}
